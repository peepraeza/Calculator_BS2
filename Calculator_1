class Calculator:
    def __init__(self, example): 
        self.exam = example
        self.ex = [] # list from example
        self.number = [] # stack number from example
        self.operator = [] # stack operator from example
        self.number_cal = [] # stack number for prepare calculate 
        self.operator_cal = [] # stack operator for prepare calculate

    def string_to_array(self, string):
        i = 0
        text = ""
        while(i < len(string)):
            if((string[i] == "-" and i == 0) or 
                (string[i] == "-" and string[i-1] == "(")):
                text += string[i]
            elif(string[i].isdigit()):  
                text += string[i]
                for j in range(i+1, len(string)):
                    if(string[j].isdigit() or string[j] == "."):
                        text += string[j]
                        i += 1
                    else:
                        break
                self.ex.append(float(text))

                text = ""
            elif(string[i] != " "):
                self.ex.append(string[i])
            i += 1

    def calculate(self): # function initial
        try:
            self.string_to_array(self.exam)
            self.add_data() # call add_data function
            self.print_answer() # call print_answer function
        except:
            print("ERROR")


    def add_data(self):
        for i in range(len(self.ex)): # if in variable have parenthesis
            if(isinstance(self.ex[i], (float)) or self.ex[i] == "("): # if variable is number
                self.number.append(self.ex[i]) # add operator to stack operator
            elif(self.ex[i] == "+" or self.ex[i] == "-" or 
            self.ex[i] == "x" or self.ex[i] == "*" or self.ex[i] == "/"): # if variable is operator
                self.operator.append(self.ex[i]) # add operator to stack operator
            elif((self.ex[i] == ")")):
                self.move_data()
        if(i == len(self.ex)-1 and len(self.number) >= 2):
            self.move_data()
        
    def move_data(self): # method move data from stack number to stack number_cal for calculate
        for i in range(len(self.number)-1, -1, -1):
            if(self.number[i] != "("):
                self.number_cal.append(self.number.pop())
            else:
                self.number.pop() # 
                break
        for i in range(len(self.number_cal)-2, -1, -1):
            self.operator_cal.append(self.operator.pop())
        self.number_cal.reverse()
        self.operator_cal.reverse()
        self.check_data()

    def check_data(self):
        while(len(self.number_cal) >= 2):
            if("x" in self.operator_cal or "/" in self.operator_cal or "*" in self.operator_cal): 
                for i in range(len(self.operator_cal)):
                    if(self.operator_cal[i] == "x" or self.operator_cal[i] == "/" or self.operator_cal[i] == "*"):
                        self.insert_data(i) 
                        break
            elif("+" in self.operator_cal or "-" in self.operator_cal): # if addition or minus in stack operator
                for i in range(len(self.operator_cal)):
                    if(self.operator_cal[i] == "+" or self.operator_cal[i] == "-"):
                        self.insert_data(i)
                        break
        if(len(self.number_cal) < 2):
            self.number.append(self.number_cal.pop())
                        
    def insert_data(self, index): # function for insert data in stack number
        a = self.number_cal.pop(index)
        b = self.number_cal.pop(index)
        op = self.operator_cal.pop(index)
        self.number_cal.insert(index, self.cal(a, b, op)) # insert number
        
    def cal(self, a, b, op): # function for calculate number
        if(op == "+"):
            return (a+b) 
        elif(op == "-"):
            return (a-b)
        elif(op == "x" or op == "*"):
            return (a*b)
        elif(op == "/"):
            return (a/b)

    def print_answer(self): # function for print answer
        if (float(self.number[0].is_integer())):
            result = int(self.number[0])
        else:
            result = self.number[0]
        print(self.exam,"=",result)
while True:
    ex = Calculator(input("Enter Example :"))
    ex.calculate()
