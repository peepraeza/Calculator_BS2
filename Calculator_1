'''

Calculator Class
@author Peerawit Wandech 5801012620054

'''
from decimal import Decimal, getcontext

class Calculator:
    def __init__(self, example):
        self.exam = example  # Keep example
        self.ex = []         # List of example
        self.number = []     # Stack of number in example
        self.operator = []   # Stack of operator in example

    # Call other method for calculate
    def calculate(self):
        try:
            self.string_to_array(self.exam)  # Call method for change string to number and operator
            self.add_data()                  # Call method for add number and operator to stacks
            self.print_answer()              # Call method for print answer
        except:
            print("Question error please try again")
    
    # Method for change string to Array list
    def string_to_array(self, string):
        i = 0  # Keep index
        operator = ["+","x","/","*","÷"]  # Keep operator for check 
        text = ""  # Keep string
        while(i < len(string)):
            if((string[i] == "-" and i == 0) or                 # If found '-' and index = 0 
                (string[i] == "-" and string[i-1] == "(") or    # If found '-' and before is '('
                string[i] == "-" and string[i-1] in operator):  # If found '-' and before is '+,x,/,*,÷'
                text += string[i]
            elif(string[i].isdigit()):  # If found number 
                text += string[i]
                for j in range(i+1, len(string)):
                    if(string[j].isdigit() or string[j] == "."):  # If next to is number too or point(.)
                        text += string[j]
                        i += 1
                    else:  # If not found number
                        break
                self.ex.append(float(text))  # Add text into List of example
                text = ""
            elif(string[i] != " "):          # If found others that isn't numbers or white space
                self.ex.append(string[i])    # Add into List of example
            i += 1

    # Method for separate data to various stack
    def add_data(self):
        for i in range(len(self.ex)):
            if(isinstance(self.ex[i], (float)) or self.ex[i] == "("):  # If data is number or '('
                self.number.append(self.ex[i])                         # Add data to stack number
            elif(self.ex[i] == "+" or self.ex[i] == "-" or  # If data is operator
                self.ex[i] == "x" or self.ex[i] == "*" or 
                self.ex[i] == "/" or self.ex[i] == "÷"): 
                self.operator.append(self.ex[i])            # Add data to stack operator
            elif((self.ex[i] == ")")):  # If data is ')'
                self.move_data()        # Call method move_data()
        if(i == len(self.ex)-1 and len(self.number) >= 2):  # If index to the final data
            self.move_data()  # Call method move_data()

    # Method for move data out from stack to calculate
    def move_data(self):
        number_cal = []    # Keep number from stack number
        operator_cal = []  # Keep operator from stack operator
        # Keep number in array number_cal
        for i in range(len(self.number)-1, -1, -1):
            if(self.number[i] != "("):                # If not found '('
                number_cal.append(self.number.pop())  # take number out from stack number and keep in number_cal
            else:                  # If found '('
                self.number.pop()  # take '(' out of stack number 
                break
        # Keep operator in array operator_cal
        for i in range(len(number_cal)-2, -1, -1):
            operator_cal.append(self.operator.pop())  # Take operator out from stack operator and keep in operator_cal
        number_cal.reverse()    # Reverse array
        operator_cal.reverse()  # Reverse array
        self.check_data(number_cal, operator_cal)     # Call method check_data()

    # Method for check data to calculated according to the principle of "Order of operations"
    def check_data(self, number_cal, operator_cal):
        while(len(number_cal) >= 2):
            if("x" in operator_cal or "/" in operator_cal or  # If operator_cal are multiple or divide symbols
                "*" in operator_cal or "÷" in operator_cal):
                for i in range(len(operator_cal)):            # Find index that have symbol
                    if(operator_cal[i] == "x" or operator_cal[i] == "/" or
                        operator_cal[i] == "*" or operator_cal[i] == "÷"):
                        self.insert_data(i, number_cal, operator_cal)       # Call method insert_data() and send index 
                        break
            elif("+" in operator_cal or "-" in operator_cal):               # If operator_cal are addition or subtract symbols
                for i in range(len(operator_cal)):                          # Find index that have symbol
                    if(operator_cal[i] == "+" or operator_cal[i] == "-"):
                        self.insert_data(i, number_cal, operator_cal)       # Call method insert_data() and send index
                        break
        # When calculations are done
        if(len(number_cal) < 2):
            self.number.append(number_cal.pop())  # Take result out from number_cal and keep in stack number

    # Method for insert number to the position where to want
    def insert_data(self, index, number_cal, operator_cal):
        a = number_cal.pop(index)
        b = number_cal.pop(index)
        op = operator_cal.pop(index)
        result = self.compute(a, b, op)  # Call method compute to calculate and keep in result
        print(result)
        number_cal.insert(index, result) # Insert result to the position followed index

    # Method for calculate number
    def compute(self, a, b, op):
        getcontext().prec = 10
        if(op == "+"):
            return (a+b)
        elif(op == "-"):
            return float(Decimal(a)-Decimal(b))
        elif(op == "x" or op == "*"):
            return (a*b)
        elif(op == "/" or op == "÷"):
            return (a/b)

    # Method for print answer
    def print_answer(self): 
        if (float(self.number[0].is_integer())):
            result = int(self.number[0])
        else:
            result = self.number[0]
        print(self.exam,"=",result)

ex = Calculator(input("Enter Example :"))
ex.calculate()
