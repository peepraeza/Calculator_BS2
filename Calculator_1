class Calculator:
    def __init__(self, example): 
        self.exam = example
        self.ex = [] # list from example
        self.number = [] # stack number from example
        self.operator = [] # stack operator from example
        self.number_cal = [] # stack number for prepare calculate 
        self.operator_cal = [] # stack operator for prepare calculate
        self.i = 0

    def string_to_array(self, string):
        i = 0
        while(i < len(string)):
            if(string[i].isdigit()):
                text = ""
                text += string[i]
                for j in range(i+1, len(string)):
                    if(string[j].isdigit() or string[j] == "."):
                        text += string[j]
                        i += 1
                    else:
                        break
                self.ex.append(text)
            elif(string[i] != " " or string[i] == "-"):
                self.ex.append(string[i])
            i += 1

    def calculate(self): # function initial
        try:
            self.string_to_array(self.exam)
            self.add_data() # call add_data function
            self.print_answer() # call print_answer function
        except:
            print("ERROR")


    def add_data(self):
        while (self.i < len(self.ex)): # if in variable have parenthesis
            if(self.ex[self.i].isdigit() or self.ex[self.i] == "("): # if variable is number
                self.number.append(self.ex[self.i]) # add operator to stack operator
            elif(self.ex[self.i] == "+" or self.ex[self.i] == "-" or 
            self.ex[self.i] == "x" or self.ex[self.i] == "*" or self.ex[self.i] == "/"): # if variable is operator
                self.operator.append(self.ex[self.i]) # add operator to stack operator
            elif(self.ex[self.i] == ")"):
                self.move_data()
                self.check_data()
            self.i += 1

        if(self.i == len(self.ex)):
            self.move_data()           
            self.check_data()
        
    def move_data(self): # method move data from stack number to stack number_cal for calculate
        for i in range(len(self.number)-1, -1, -1):
            if(self.number[i] != "("):
                self.number_cal.append(self.number.pop())
            else:
                self.number.pop() # 
                break
        self.number_cal.reverse()
        for i in range(len(self.number_cal)-2, -1, -1):
            self.operator_cal.append(self.operator.pop())
        self.operator_cal.reverse()

    def check_data(self):
        while(len(self.number_cal) >= 2):
            if("x" in self.operator_cal or "/" in self.operator_cal or "*" in self.operator_cal): 
                for i in range(len(self.operator_cal)):
                    if(self.operator_cal[i] == "x" or self.operator_cal[i] == "/" or self.operator_cal[i] == "*"):
                        self.insert_data(i) 
                        break
            elif("+" in self.operator_cal or "-" in self.operator_cal): # if addition or minus in stack operator
                for i in range(len(self.operator_cal)):
                    if(self.operator_cal[i] == "+" or self.operator_cal[i] == "-"):
                        self.insert_data(i)
                        break
        if(len(self.number_cal) < 2):
            self.number.append(self.number_cal.pop())
                        
    def insert_data(self, index): # function for insert data in stack number
        a = float(self.number_cal.pop(index))
        b = float(self.number_cal.pop(index))
        op = self.operator_cal.pop(index)
        self.number_cal.insert(index, self.cal(a, b, op)) # insert number
        
    def cal(self, a, b, op): # function for calculate number
        if(op == "+"):
            return (a+b) 
        elif(op == "-"):
            return (a-b)
        elif(op == "x" or op == "*"):
            return (a*b)
        elif(op == "/"):
            return (a/b)

    def print_answer(self): # function for print answer
        print(self.exam,"=",self.number[0])

ex = Calculator("(3)")
ex.calculate()
